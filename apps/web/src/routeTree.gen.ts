/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthOverviewRouteImport } from './routes/_auth/overview'
import { Route as AuthProfileIndexRouteImport } from './routes/_auth/profile/index'
import { Route as AuthProductsIndexRouteImport } from './routes/_auth/products/index'
import { Route as AuthDashboardIndexRouteImport } from './routes/_auth/dashboard/index'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthOverviewRoute = AuthOverviewRouteImport.update({
  id: '/overview',
  path: '/overview',
  getParentRoute: () => AuthRoute,
} as any)
const AuthProfileIndexRoute = AuthProfileIndexRouteImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthProductsIndexRoute = AuthProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthDashboardIndexRoute = AuthDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/overview': typeof AuthOverviewRoute
  '/dashboard': typeof AuthDashboardIndexRoute
  '/products': typeof AuthProductsIndexRoute
  '/profile': typeof AuthProfileIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/overview': typeof AuthOverviewRoute
  '/dashboard': typeof AuthDashboardIndexRoute
  '/products': typeof AuthProductsIndexRoute
  '/profile': typeof AuthProfileIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_auth/overview': typeof AuthOverviewRoute
  '/_auth/dashboard/': typeof AuthDashboardIndexRoute
  '/_auth/products/': typeof AuthProductsIndexRoute
  '/_auth/profile/': typeof AuthProfileIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/overview'
    | '/dashboard'
    | '/products'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/overview'
    | '/dashboard'
    | '/products'
    | '/profile'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/register'
    | '/_auth/overview'
    | '/_auth/dashboard/'
    | '/_auth/products/'
    | '/_auth/profile/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/overview': {
      id: '/_auth/overview'
      path: '/overview'
      fullPath: '/overview'
      preLoaderRoute: typeof AuthOverviewRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/profile/': {
      id: '/_auth/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/products/': {
      id: '/_auth/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof AuthProductsIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/dashboard/': {
      id: '/_auth/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardIndexRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthOverviewRoute: typeof AuthOverviewRoute
  AuthDashboardIndexRoute: typeof AuthDashboardIndexRoute
  AuthProductsIndexRoute: typeof AuthProductsIndexRoute
  AuthProfileIndexRoute: typeof AuthProfileIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthOverviewRoute: AuthOverviewRoute,
  AuthDashboardIndexRoute: AuthDashboardIndexRoute,
  AuthProductsIndexRoute: AuthProductsIndexRoute,
  AuthProfileIndexRoute: AuthProfileIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
